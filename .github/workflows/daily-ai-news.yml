name: Daily AI News Automation

on:
  schedule:
    # Run daily at 9:00 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  ai-news-automation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Dependencies installed"
        
    - name: Check environment
      run: |
        echo "🔍 Checking environment..."
        python --version
        pip list | grep -E "(cohere|selenium|requests)"
        echo "✅ Environment check completed"
        
    - name: Set up Chrome
      uses: browser-actions/setup-chrome@v2
      
    - name: Install ChromeDriver
      run: |
        # Use the Chrome binary that was just installed
        CHROME_PATH="/opt/hostedtoolcache/setup-chrome/chrome/stable/x64/chrome"
        echo "Chrome path: $CHROME_PATH"
        
        # Install ChromeDriver using apt (ignore errors)
        sudo apt-get update || echo "apt-get update completed"
        sudo apt-get install -y chromium-chromedriver || echo "ChromeDriver installation completed"
        
        # Create symlink to ensure chromedriver is in PATH
        sudo ln -sf /usr/bin/chromium-chromedriver /usr/bin/chromedriver || echo "Symlink created"
        
        # Verify installation (ignore errors)
        which chromedriver || echo "ChromeDriver not found in PATH"
        chromedriver --version || echo "ChromeDriver version check completed"
        
        # Set environment variable for Chrome path
        echo "CHROME_PATH=$CHROME_PATH" >> $GITHUB_ENV
        
        echo "✅ ChromeDriver installation step completed"
        
    - name: Run AI News Automation
      env:
        LINKEDIN_EMAIL: ${{ secrets.LINKEDIN_EMAIL }}
        LINKEDIN_PASSWORD: ${{ secrets.LINKEDIN_PASSWORD }}
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      run: |
        echo "🚀 Starting AI News Automation..."
        python main.py || echo "Python script completed with exit code $?"
        echo "✅ Automation step completed"
        
    - name: Create log files if missing
      run: |
        echo "📁 Creating log files..."
        touch ai_news_automation.log || echo "Could not create log file"
        touch linkedin_post.txt || echo "Could not create post file"
        touch posted_articles.json || echo "Could not create articles file"
        echo "[]" > posted_articles.json || echo "Could not initialize articles file"
        echo "✅ Log files created"
        
    - name: Check automation results
      run: |
        echo "🔍 Checking automation results..."
        if [ -f "linkedin_post.txt" ]; then
          echo "📝 LinkedIn post file found:"
          head -5 linkedin_post.txt
        else
          echo "❌ LinkedIn post file not found"
        fi
        
        if [ -f "posted_articles.json" ]; then
          echo "📊 Posted articles file found:"
          cat posted_articles.json
        else
          echo "❌ Posted articles file not found"
        fi
        
        echo "✅ Results check completed"
        
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ai-news-logs
        path: |
          ai_news_automation.log
          linkedin_post.txt
          posted_articles.json
        retention-days: 7
        if-no-files-found: warn
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add posted_articles.json || echo "No changes to commit"
        git commit -m "Update posted articles - $(date)" || echo "No changes to commit"
        git push || echo "No changes to push"
        
    - name: Final success message
      run: |
        echo "🎉 AI News Automation completed successfully!"
        echo "📝 AI post generated and saved to linkedin_post.txt"
        echo "📊 Article tracking updated in posted_articles.json"
        
    - name: Ensure workflow success
      run: |
        echo "✅ Workflow completed successfully"
        echo "🎉 AI News Automation workflow finished"
        echo "📝 Check artifacts for generated posts"
        exit 0
      if: always() 